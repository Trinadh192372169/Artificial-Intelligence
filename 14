import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[r][col] == player for r in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

def alpha_beta(board, depth, is_max, alpha, beta):
    if is_winner(board, 'O'):
        return 1
    if is_winner(board, 'X'):
        return -1
    if is_draw(board):
        return 0

    if is_max:
        max_eval = -math.inf
        for r in range(3):
            for c in range(3):
                if board[r][c] == ' ':
                    board[r][c] = 'O'
                    eval = alpha_beta(board, depth + 1, False, alpha, beta)
                    board[r][c] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for r in range(3):
            for c in range(3):
                if board[r][c] == ' ':
                    board[r][c] = 'X'
                    eval = alpha_beta(board, depth + 1, True, alpha, beta)
                    board[r][c] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def best_move(board):
    best_score = -math.inf
    move = (0, 0)
    for r in range(3):
        for c in range(3):
            if board[r][c] == ' ':
                board[r][c] = 'O'
                score = alpha_beta(board, 0, False, -math.inf, math.inf)
                board[r][c] = ' '
                if score > best_score:
                    best_score = score
                    move = (r, c)
    return move

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("You are X, AI is O")
    while True:
        print_board(board)
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if board[row][col] != ' ':
            print("Invalid move.")
            continue
        board[row][col] = 'X'

        if is_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break
        if is_draw(board):
            print_board(board)
            print("Draw!")
            break

        ai_r, ai_c = best_move(board)
        board[ai_r][ai_c] = 'O'
        print(f"AI played at ({ai_r}, {ai_c})")

        if is_winner(board, 'O'):
            print_board(board)
            print("AI wins!")
            break
        if is_draw(board):
            print_board(board)
            print("Draw!")
            break

# Run the game
play_game()

Output :
You are X, AI is O
  |   |  
-----
  |   |  
-----
  |   |  
Enter row (0-2): 0
Enter col (0-2): 0
AI played at (1, 1)
X |   |  
-----
  | O |  
-----
  |   |  
...
AI wins!
