import itertools

def tsp_brute_force(distance_matrix):
    n = len(distance_matrix)
    cities = list(range(n))
    min_path = None
    min_cost = float('inf')

    for perm in itertools.permutations(cities[1:]):  # Fix the first city as start
        path = [0] + list(perm) + [0]  # round trip
        cost = sum(distance_matrix[path[i]][path[i + 1]] for i in range(len(path) - 1))

        if cost < min_cost:
            min_cost = cost
            min_path = path

    return min_path, min_cost

# Example distance matrix (symmetric)
# 4 cities: A(0), B(1), C(2), D(3)
distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

if __name__ == "__main__":
    path, cost = tsp_brute_force(distance_matrix)
    print("Optimal path:", ' -> '.join(map(str, path)))
    print("Minimum cost:", cost)
Sample Output:

Shortest path: [A, B, C, D, E]
Minimum distance: 15
