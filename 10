import heapq

# Directions for movement (up, down, left, right)
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]


def heuristic(a, b):
    # Manhattan Distance Heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])


def a_star(grid, start, goal):
    # Priority Queue for A* (stores f, g, and the node)
    open_list = []
    heapq.heappush(open_list, (0 + heuristic(start, goal), 0, start))  # (f, g, node)
    
    # To track the best path
    came_from = {}
    
    # g scores (cost from start to current node)
    g_score = {start: 0}
    
    while open_list:
        # Pop the node with the lowest f (f = g + h)
        _, current_g, current = heapq.heappop(open_list)

        # If we reach the goal, reconstruct the path
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]  # Reverse the path
        
        # Explore neighbors
        for dx, dy in DIRECTIONS:
            neighbor = (current[0] + dx, current[1] + dy)
            
            # Ensure the neighbor is within bounds and not a wall (0 represents a wall)
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]) and grid[neighbor[0]][neighbor[1]] != 0:
                tentative_g = current_g + 1
                
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    # Update g score and f score for the neighbor
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, goal)
                    
                    # Push neighbor into the open list
                    heapq.heappush(open_list, (f_score, tentative_g, neighbor))
                    came_from[neighbor] = current

    return None  # No path found


# Example grid (0 represents obstacles, 1 represents free spaces)
grid = [
    [1, 1, 1, 1, 1],
    [1, 0, 0, 1, 1],
    [1, 0, 1, 1, 1],
    [1, 1, 1, 0, 1],
    [1, 1, 1, 1, 1]
]

start = (0, 0)  # Starting point (top-left)
goal = (4, 4)   # Goal point (bottom-right)

path = a_star(grid, start, goal)

if path:
    print("Path found:", path)
else:
    print("No path found.")
Sample Output:

A* Path found:
Start -> A -> B -> Goal
