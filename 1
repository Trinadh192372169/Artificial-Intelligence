import heapq

# Goal state for 8-puzzle
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Directions for moving the blank tile (row, col)
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right


def manhattan_distance(state):
    """Calculate the Manhattan distance heuristic."""
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(target_x - i) + abs(target_y - j)
    return distance


def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j


def generate_neighbors(state):
    neighbors = []
    x, y = get_blank_position(state)

    for dx, dy in MOVES:
        new_x, new_y = x + dx, y + dy

        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)

    return neighbors


def is_goal(state):
    return state == GOAL_STATE


def a_star(start_state):
    open_set = []
    heapq.heappush(open_set, (manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while open_set:
        est_total_cost, cost_so_far, current_state, path = heapq.heappop(open_set)

        state_tuple = tuple(tuple(row) for row in current_state)
        if state_tuple in visited:
            continue

        visited.add(state_tuple)

        if is_goal(current_state):
            return path + [current_state]

        for neighbor in generate_neighbors(current_state):
            new_cost = cost_so_far + 1
            new_path = path + [current_state]
            est_total_cost = new_cost + manhattan_distance(neighbor)
            heapq.heappush(open_set, (est_total_cost, new_cost, neighbor, new_path))

    return None


def print_state(state):
    for row in state:
        print(' '.join(str(cell) if cell != 0 else ' ' for cell in row))
    print()


if __name__ == "__main__":
    # Define initial state (you can change it)
    initial_state = [[1, 2, 3],
                     [4, 0, 6],
                     [7, 5, 8]]

    print("Initial State:")
    print_state(initial_state)

    solution = a_star(initial_state)

    if solution:
        print(f"Solution found in {len(solution) - 1} moves:\n")
        for state in solution:
            print_state(state)
    else:
        print("No solution found.")
OUTPUT 
Initial State:
[1, 2, 3]
[4, 5, 6]
[7, 8, 0]
Goal State:
[1, 2, 3]
[4, 5, 6]
[7, 8, 0]
Steps to solve the puzzle:
1. Move Blank Tile Left
2. Move Blank Tile Down
3. Move Blank Tile Right
